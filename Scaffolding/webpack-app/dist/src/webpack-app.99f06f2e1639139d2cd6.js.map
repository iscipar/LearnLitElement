{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../src/lib/directive.ts","webpack:///../src/lib/dom.ts","webpack:///../src/lib/part.ts","webpack:///../src/lib/template.ts","webpack:///../src/lib/template-instance.ts","webpack:///../src/lib/template-result.ts","webpack:///../src/lib/parts.ts","webpack:///../src/lib/default-template-processor.ts","webpack:///../src/lib/template-factory.ts","webpack:///../src/lib/render.ts","webpack:///src/lit-html.ts","webpack:///../src/lib/modify-template.ts","webpack:///../src/lib/shady-render.ts","webpack:///../src/lib/updating-element.ts","webpack:///../src/lib/decorators.ts","webpack:///../src/lib/css-tag.ts","webpack:///src/lit-element.ts","webpack:///./node_modules/polypar-flag-icon/icons.js","webpack:///./node_modules/polypar-flag-icon/polypar-flag-icon.js","webpack:///./src/webpack-app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","directives","WeakMap","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","arguments","length","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","template_result_TemplateResult","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","setAttribute","_getValue","committer","directive","parts_NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","parts_EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","set","join","getTemplateElement","render_parts","lit_html_html","_len","_key","walkerNodeFilter","removeNodesFromTemplate","modify_template_nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","oldValue","_requestUpdate","configurable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","textFromCSSResult","css","reduce","acc","idx","flattenStyles","flat","Infinity","arrayFlat","lit_element_LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","delete","icons","france","italy","kingdom","define","LitElement","flag","heading"],"mappings":"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","file":"./src/webpack-app.99f06f2e1639139d2cd6.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? marker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.1');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module shady-render\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex: number = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|((value: string, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\nexport type PropertyValues = Map<PropertyKey, unknown>;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        return JSON.parse(value!);\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst microtaskPromise = Promise.resolve(true);\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY|typeof STATE_HAS_CONNECTED;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static finalized = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    Object.defineProperty(this.prototype, name, {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)._requestUpdate(name, oldValue);\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n        this.finalized) {\n      return;\n    }\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (typeof superCtor.finalize === 'function') {\n      superCtor.finalize();\n    }\n    this.finalized = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState: UpdateState = 0;\n  private _instanceProperties: PropertyValues|undefined = undefined;\n  private _updatePromise: Promise<unknown> = microtaskPromise;\n  private _hasConnectedResolver: (() => void)|undefined = undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties: PropertyValues = new Map();\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties: Map<PropertyKey, PropertyDeclaration>|\n      undefined = undefined;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this._requestUpdate();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    this._updateState = this._updateState | STATE_HAS_CONNECTED;\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection and if one is pending connection the\n    // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n    // update, otherwise requestUpdate.\n    if (this._hasConnectedResolver) {\n      this._hasConnectedResolver();\n      this._hasConnectedResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const propName = ctor._attributeToPropertyMap.get(name);\n    if (propName !== undefined) {\n      const options =\n          ctor._classProperties!.get(propName) || defaultPropertyDeclaration;\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This private version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  private _requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      const options =\n          ctor._classProperties!.get(name) || defaultPropertyDeclaration;\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this._requestUpdate(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    // Mark state updating...\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    let resolve!: (r: boolean) => void;\n    let reject!: (e: Error) => void;\n    const previousUpdatePromise = this._updatePromise;\n    this._updatePromise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await previousUpdatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    // Make sure the element has connected before updating.\n    if (!this._hasConnected) {\n      await new Promise((res) => this._hasConnectedResolver = res);\n    }\n    try {\n      const result = this.performUpdate();\n      // If `performUpdate` returns a Promise, we await it. This is done to\n      // enable coordinating updates with a scheduler. Note, the result is\n      // checked to avoid delaying an additional microtask unless we need to.\n      if (result != null) {\n        await result;\n      }\n    } catch (e) {\n      reject(e);\n    }\n    resolve(!this._hasRequestedUpdate);\n  }\n\n  private get _hasConnected() {\n    return (this._updateState & STATE_HAS_CONNECTED);\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      throw e;\n    } finally {\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update. This getter can be implemented to\n   * await additional state. For example, it is sometimes useful to await a\n   * rendered element before fulfilling this Promise. To do this, first await\n   * `super.updateComplete` then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  new (...args: unknown[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options: AddEventListenerOptions) =>\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n         (name !== undefined) ?\n         legacyEventOptions(options, protoOrDescriptor as Object, name) :\n         standardEventOptions(options, protoOrDescriptor as ClassElement)) as\n        // tslint:disable-next-line:no-any decorator\n        any;\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const supportsAdoptingStyleSheets =\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n      // is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {TemplateResult} from 'lit-html';\nimport {render} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.0');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(\n    styles: CSSResultArray, result: CSSResult[] = []): CSSResult[] {\n  for (let i = 0, length = styles.length; i < length; i++) {\n    const value = styles[i];\n    if (Array.isArray(value)) {\n      arrayFlat(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles: CSSResultArray): CSSResult[] =>\n    styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   */\n  protected static finalized = true;\n\n  /**\n   * Render method used to render the lit-html TemplateResult to the element's\n   * DOM.\n   * @param {TemplateResult} Template to render.\n   * @param {Element|DocumentFragment} Node into which to render.\n   * @param {String} Element name.\n   * @nocollapse\n   */\n  static render = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /** @nocollapse */\n  protected static finalize() {\n    super.finalize();\n    // Prepare styling that is stamped at first render time. Styling\n    // is built from user provided `styles` or is inherited from the superclass.\n    this._styles =\n        this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n        this._getUniqueStyles() :\n        this._styles || [];\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles(): CSSResult[] {\n    // Take care not to call `this.styles` multiple times since this generates\n    // new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.styles;\n    const styles: CSSResult[] = [];\n    if (Array.isArray(userStyles)) {\n      const flatStyles = flattenStyles(userStyles);\n      // As a performance optimization to avoid duplicated styling that can\n      // occur especially when composing via subclassing, de-duplicate styles\n      // preserving the last item in the list. The last item is kept to\n      // try to preserve cascade order with the assumption that it's most\n      // important that last added styles override previous styles.\n      const styleSet = flatStyles.reduceRight((set, s) => {\n        set.add(s);\n        // on IE set.add does not return the set.\n        return set;\n      }, new Set<CSSResult>());\n      // Array.from does not work on Set in IE\n      styleSet.forEach((v) => styles.unshift(v));\n    } else if (userStyles) {\n      styles.push(userStyles);\n    }\n    return styles;\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    super.update(changedProperties);\n    const templateResult = this.render() as unknown;\n    if (templateResult instanceof TemplateResult) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render(): TemplateResult|void {\n  }\n}\n","import { html } from 'lit-element';\r\n\r\nexport const icons = {\r\n    france: html`\r\n                <svg style=\"enable-background:new 0 0 512 512;\" viewBox=\"0 0 512 512\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n                    <style type=\"text/css\">\r\n                        .st0{fill:#324095;}\r\n                        .st1{fill:#F4F4F4;}\r\n                        .st2{fill:#D81E34;}\r\n                    </style>\r\n                    <g>\r\n                        <rect class=\"st0\" height=\"298.7\" width=\"170.7\" x=\"0\" y=\"106.7\"/>\r\n                        <rect class=\"st1\" height=\"298.7\" width=\"170.7\" x=\"170.7\" y=\"106.7\"/>\r\n                        <rect class=\"st2\" height=\"298.7\" width=\"170.7\" x=\"341.3\" y=\"106.7\"/>\r\n                    </g>\r\n                </svg>`,\r\n    italy: html`\r\n                <svg style=\"enable-background:new 0 0 512 512;\" viewBox=\"0 0 512 512\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n                    <style type=\"text/css\">\r\n                        .st0{fill:#3D9448;}\r\n                        .st1{fill:#F4F4F4;}\r\n                        .st2{fill:#D81E34;}\r\n                    </style>\r\n                    <g>\r\n                        <rect class=\"st0\" height=\"298.7\" width=\"170.7\" y=\"106.7\"/>\r\n                        <rect class=\"st1\" height=\"298.7\" width=\"170.7\" x=\"170.7\" y=\"106.7\"/>\r\n                        <rect class=\"st2\" height=\"298.7\" width=\"170.7\" x=\"341.3\" y=\"106.7\"/>\r\n                    </g>\r\n                </svg>`,\r\n    kingdom: html`\r\n                <svg style=\"enable-background:new 0 0 512 512;\" viewBox=\"0 0 512 512\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n                    <style type=\"text/css\">\r\n                        .st0{fill:#FFFFFF;}\r\n                        .st1{fill:#BD0034;}\r\n                        .st2{fill:#1A237B;}\r\n                    </style>\r\n                    <g>\r\n                        <rect class=\"st0\" height=\"298.7\" width=\"512\" y=\"106.7\"/>\r\n                        <polygon class=\"st1\" points=\"342.8,214.7 512,119.9 512,106.7 500.3,106.7 307.4,214.7  \"/>\r\n                        <polygon class=\"st1\" points=\"334.8,303.4 512,402.5 512,382.7 370.2,303.4  \"/>\r\n                        <polygon class=\"st1\" points=\"0,129.4 151.5,214.7 187,214.7 0,109.5  \"/>\r\n                        <polygon class=\"st1\" points=\"178.9,303.4 0,403.6 0,405.4 32.3,405.4 214.4,303.4  \"/>\r\n                        <polygon class=\"st2\" points=\"477,106.7 297.7,106.7 297.7,207.1  \"/>\r\n                        <polygon class=\"st2\" points=\"218.5,106.7 40,106.7 218.5,207.1  \"/>\r\n                        <polygon class=\"st2\" points=\"512,214.7 512,146.1 390.4,214.7  \"/>\r\n                        <polygon class=\"st2\" points=\"512,371.1 512,303.4 390.4,303.4  \"/>\r\n                        <polygon class=\"st2\" points=\"50.1,405.4 218.5,405.4 218.5,310.9  \"/>\r\n                        <polygon class=\"st2\" points=\"297.7,405.4 466.6,405.4 297.7,310.9  \"/>\r\n                        <polygon class=\"st2\" points=\"0,303.4 0,374.2 125.8,303.4  \"/>\r\n                        <polygon class=\"st2\" points=\"0,214.7 125.8,214.7 0,143.7  \"/>\r\n                        <polygon class=\"st1\" points=\"234.4,106.7 234.4,232.4 0,232.4 0,285.6 234.4,285.6 234.4,405.4 281.9,405.4 281.9,285.6 512,285.6    512,232.4 281.9,232.4 281.9,106.7  \"/>\r\n                    </g>\r\n                </svg>`\r\n}","import { LitElement, html, css } from 'lit-element';\r\nimport { icons } from './icons';\r\n\r\nexport class PolyparFlagIcon extends LitElement {\r\n\r\n    static get properties() {\r\n        return {\r\n            flag: {\r\n                type: String\r\n            }\r\n        };\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.flag = 'kingdom';\r\n    }\r\n\r\n    static get styles() {\r\n        return css`\r\n            :host {\r\n                display: inline-block;\r\n            }\r\n\r\n            :host([hidden]) {\r\n                display: none;\r\n            }\r\n          \r\n            path[fill=\"none\"] {\r\n                fill: transparent;\r\n            }\r\n\r\n            svg {\r\n                width: var(--polypar-flag-icon-size, 24px);\r\n                height: var(--polypar-flag-icon-size, 24px);\r\n            }\r\n\r\n            div {\r\n                display: flex;\r\n            }\r\n        `;\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            ${icons[this.flag]}\r\n        `;\r\n    }\r\n}\r\ncustomElements.define('polypar-flag-icon', PolyparFlagIcon);","import { LitElement, html } from 'lit-element';\nimport 'polypar-flag-icon/polypar-flag-icon';\n\nclass WebpackApp extends LitElement {\n\tstatic get properties() {\n\t\treturn {\n\t\t\theading: { type: String },\n\t\t};\n\t}\n\n\trender() {\n\t\treturn html`\n\t\t\t<h1>${this.heading}</h1>\n\t\t\t<polypar-flag-icon></polypar-flag-icon>\n\t\t`;\n\t}\n}\n\ncustomElements.define('webpack-app', WebpackApp);\n"],"sourceRoot":""}